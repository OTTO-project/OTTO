* Signal Path

[[images/signalpath.png]]

** Modules
These are the inputs/outputs the different modules need:

| Module         | Audio In | Out | MIDI In | MIDI out |
|----------------+----------+-----+---------+----------|
| Synth          |        0 |   1 |       1 |        0 |
| Drums          |        0 |   1 |       1 |        0 |
| SEQ            |        0 |   0 |       1 |        1 |
| FX             |        1 |   1 |       1 |        0 |
| MOD            |        0 |   0 |       1 |        1 |
| Input Selector |        4 |   1 |       0 |        0 |
| Tape playback  |        0 |   4 |       1 |        0 |
| Tape record    |        1 |   0 |       0 |        0 |
| Mixer          |        5 |   2 |       0 |        0 |
| Master FX      |        2 |   2 |       1 |        0 |

* Audio Processors

To reduce cache misses, and all in all get more logical passing of data between different audio processors, each processor receives and returns an array of interleaved audio samples. With this, there are a few problems to tackle.
** ProcessData
ProcessData is the template class that is passed between the processors. It should not own any data, and use something like a =gsl::span= for audio data.
This audio data is owned by the module that created it, which should store it in a =otto::RTBuffer=. This means no new memory will be allocated for audio, except when the buffersize changes, which in practice shouldn't happen.
Midi data however, needs to be modified in length a lot more, meaning this should maybe be owned by the =ProcessData= instance itself. This however might require a vector with a small-size optimization, which I'm not sure where we can get. But it must be out there, i know LLVM has one, though i don't know how accessible it is.
** In place editing
Can processors edit the audio in place, or do they need to copy to a local buffer?
** MIDI data
We need a new system for Midi events. Currently they use polymorphism, which basically means they have to be heap-allocated. Without a custom allocator, that's bad.
The simplest approach would be to write a single class for it, or maybe use a variant.
** Slicing
** Design
The main problem is to make sure we only compute the data we need. The module mostly creating this problem is the input selector. For generality, it would be best to make the input selector part of the signal path, and allow other things like it to switch between inputs, which might be useful in the future. However for just current implementation, it might be easiest to implement the input selector as being "outside" the signal path.
If we choose the general approach, we would have to start every cycle from the end of the path, and the processors then need to call their inputs compute functions.
*** The simple approach
Something like the below would be fairly easy to implement, but quite convoluted to use. Also some parts (like the input selector) have to be written in the signal path handler itself.
#+BEGIN_SRC c++
ProcessData<2> Mixer::process_tracks(ProcessData<4>);
ProcessData<2> Mixer::process_engine(ProcessData<1>);
ProcessData<4> Tapedeck::playback(ProcessData<0>);
ProcessData<0> Tapedeck::record(ProcessData<1>);
ProcessData<1> Synth::process(ProcessData<0>);
ProcessData<1> Effect::process(ProcessData<1>);
ProcessData<0> Sequencer::process(ProcessData<0>);
ProcessData<0> Modulation::process(ProcessData<0>);
ProcessData<2> MasterEffect::process(ProcessData<2>);

// Main processor function

auto mod_out = mod.process(midi_in);
auto playback_out = tapedeck.playback(midi_in);
auto mixer_out = mixer.process(playback_out);

auto record_in = [&] {
  switch (selector.input) {
  case Selection::Internal:
    auto seq_out = seq.process(midi_in);
    auto seq_and_mod = join_midi(seq_out, mod_out);
    auto synth_out = synth.process(seq_and_mod);
    return fx.process(synth_out);
  case Selection::External:
    return fx.process(join_midi(external_in, mod_out));
  case Selection::TrackFB:
    return playback_out.get_channel(selector.track);
  case Selection::MasterFB:
    return mono_mix(mixer_out);
  }
};

mixer_out.add_to_all(tapedeck.record(record_in));

auto final_out = master_fx.process(mixer_out);
#+END_SRC
Even though its not very fancy, it should work, and its easy to find the functions that are being called.
*** A more general approach
A ranges-like syntax could be adopted, piping data between processors. This would let us write the signal path like this:
#+BEGIN_SRC c++
auto engine = (synth_selected) ? synth : drums;
auto seqOut = midi_in | sequencer;
auto internalOut = (seqOut + (seqOut | modulation)) | engine | fx;
#+END_SRC
This might however be a lot more complicated to implement, and might for that reason not be worth it.

*** Verdict
if i was writing this for a library, I would do it using pipes - however, lets keep simple tasks simple, and try to implement the first one.

* Features
** Studio
- Tapedeck
- Tape collection
- Mixer
- Tempo
- Master FX
- (Track editing)

** Internal
 - Synth
 - Envelope
 - 2x (4x) FX
 - Sequencers
 - Modulation

** External
 - External 
** Utilities
- Mixdown

* Buttons
| Button      | Function  | With shift   | Notes                     |
|-------------+-----------+--------------+---------------------------|
| Tape        |           | collection   |                           |
| Mixer       |           |              |                           |
| Tempo       |           |              |                           |
| Synths      |           |              |                           |
| Effects     |           |              |                           |
| Utility     |           |              |                           |
| Play        | play      |              | Global                    |
| Stop        | stop      |              | Global                    |
| Record      | record    |              |                           |
| shift       |           | Â¿ what ?     |                           |
| left        | spool BW  | BW by a bar  |                           |
| right       | spool FW  | FW by a bar  |                           |
| lift        | Lift      | Drop         | tape mode mainly?         |
| cut         | Cut       | Glue         | tape mode mainly?         |
| loop in     | go to IN  | set IN here  | tape mode only            |
| loop out    | go to OUT | set OUT here | tape mode only            |
| loop toggle |           |              |                           |
| T1-T4       |           |              |                           |
| N preset    |           |              | Could double as loop keys |
